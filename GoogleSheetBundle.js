// Generated by purs bundle 0.14.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
})(PS);
(function(exports) {
  "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };

  // | The `void` function is used to ignore the type wrapped by a
  // | [`Functor`](#functor), replacing it with `Unit` and keeping only the type
  // | information provided by the type constructor itself.
  // |
  // | `void` is often useful when using `do` notation to change the return type
  // | of a monadic computation:
  // |
  // | ```purescript
  // | main = forE 1 10 \n -> void do
  // |   print n
  // |   print (n * n)
  // | ```
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Date.Component"] = $PS["Data.Date.Component"] || {};
  var exports = $PS["Data.Date.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqYear = Data_Eq.eqInt;
  var eqMonth = {
      eq: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return true;
              };
              if (x instanceof February && y instanceof February) {
                  return true;
              };
              if (x instanceof March && y instanceof March) {
                  return true;
              };
              if (x instanceof April && y instanceof April) {
                  return true;
              };
              if (x instanceof May && y instanceof May) {
                  return true;
              };
              if (x instanceof June && y instanceof June) {
                  return true;
              };
              if (x instanceof July && y instanceof July) {
                  return true;
              };
              if (x instanceof August && y instanceof August) {
                  return true;
              };
              if (x instanceof September && y instanceof September) {
                  return true;
              };
              if (x instanceof October && y instanceof October) {
                  return true;
              };
              if (x instanceof November && y instanceof November) {
                  return true;
              };
              if (x instanceof December && y instanceof December) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordMonth = {
      compare: function (x) {
          return function (y) {
              if (x instanceof January && y instanceof January) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof January) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof January) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof February && y instanceof February) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof February) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof February) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof March && y instanceof March) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof March) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof March) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof April && y instanceof April) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof April) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof April) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof May && y instanceof May) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof May) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof May) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof June && y instanceof June) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof June) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof June) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof July && y instanceof July) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof July) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof July) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof August && y instanceof August) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof August) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof August) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof September && y instanceof September) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof September) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof September) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof October && y instanceof October) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof October) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof October) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof November && y instanceof November) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof November) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof November) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof December && y instanceof December) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqMonth;
      }
  };
  var eqDay = Data_Eq.eqInt;
  var boundedYear = {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function () {
          return ordYear;
      }
  };
  var boundedMonth = {
      bottom: January.value,
      top: December.value,
      Ord0: function () {
          return ordMonth;
      }
  };
  var boundedEnumYear = {
      cardinality: 547580,
      toEnum: function (n) {
          if (n >= (-271820 | 0) && n <= 275759) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedYear;
      },
      Enum1: function () {
          return enumYear;
      }
  };
  var enumYear = {
      succ: (function () {
          var $46 = Data_Enum.toEnum(boundedEnumYear);
          var $47 = Data_Enum.fromEnum(boundedEnumYear);
          return function ($48) {
              return $46((function (v) {
                  return v + 1 | 0;
              })($47($48)));
          };
      })(),
      pred: (function () {
          var $49 = Data_Enum.toEnum(boundedEnumYear);
          var $50 = Data_Enum.fromEnum(boundedEnumYear);
          return function ($51) {
              return $49((function (v) {
                  return v - 1 | 0;
              })($50($51)));
          };
      })(),
      Ord0: function () {
          return ordYear;
      }
  };
  var boundedEnumMonth = {
      cardinality: 12,
      toEnum: function (v) {
          if (v === 1) {
              return new Data_Maybe.Just(January.value);
          };
          if (v === 2) {
              return new Data_Maybe.Just(February.value);
          };
          if (v === 3) {
              return new Data_Maybe.Just(March.value);
          };
          if (v === 4) {
              return new Data_Maybe.Just(April.value);
          };
          if (v === 5) {
              return new Data_Maybe.Just(May.value);
          };
          if (v === 6) {
              return new Data_Maybe.Just(June.value);
          };
          if (v === 7) {
              return new Data_Maybe.Just(July.value);
          };
          if (v === 8) {
              return new Data_Maybe.Just(August.value);
          };
          if (v === 9) {
              return new Data_Maybe.Just(September.value);
          };
          if (v === 10) {
              return new Data_Maybe.Just(October.value);
          };
          if (v === 11) {
              return new Data_Maybe.Just(November.value);
          };
          if (v === 12) {
              return new Data_Maybe.Just(December.value);
          };
          return Data_Maybe.Nothing.value;
      },
      fromEnum: function (v) {
          if (v instanceof January) {
              return 1;
          };
          if (v instanceof February) {
              return 2;
          };
          if (v instanceof March) {
              return 3;
          };
          if (v instanceof April) {
              return 4;
          };
          if (v instanceof May) {
              return 5;
          };
          if (v instanceof June) {
              return 6;
          };
          if (v instanceof July) {
              return 7;
          };
          if (v instanceof August) {
              return 8;
          };
          if (v instanceof September) {
              return 9;
          };
          if (v instanceof October) {
              return 10;
          };
          if (v instanceof November) {
              return 11;
          };
          if (v instanceof December) {
              return 12;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [ v.constructor.name ]);
      },
      Bounded0: function () {
          return boundedMonth;
      },
      Enum1: function () {
          return enumMonth;
      }
  };
  var enumMonth = {
      succ: (function () {
          var $58 = Data_Enum.toEnum(boundedEnumMonth);
          var $59 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($60) {
              return $58((function (v) {
                  return v + 1 | 0;
              })($59($60)));
          };
      })(),
      pred: (function () {
          var $61 = Data_Enum.toEnum(boundedEnumMonth);
          var $62 = Data_Enum.fromEnum(boundedEnumMonth);
          return function ($63) {
              return $61((function (v) {
                  return v - 1 | 0;
              })($62($63)));
          };
      })(),
      Ord0: function () {
          return ordMonth;
      }
  };
  var boundedDay = {
      bottom: 1,
      top: 31,
      Ord0: function () {
          return ordDay;
      }
  };
  var boundedEnumDay = {
      cardinality: 31,
      toEnum: function (n) {
          if (n >= 1 && n <= 31) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [ n.constructor.name ]);
      },
      fromEnum: function (v) {
          return v;
      },
      Bounded0: function () {
          return boundedDay;
      },
      Enum1: function () {
          return enumDay;
      }
  };
  var enumDay = {
      succ: (function () {
          var $64 = Data_Enum.toEnum(boundedEnumDay);
          var $65 = Data_Enum.fromEnum(boundedEnumDay);
          return function ($66) {
              return $64((function (v) {
                  return v + 1 | 0;
              })($65($66)));
          };
      })(),
      pred: (function () {
          var $67 = Data_Enum.toEnum(boundedEnumDay);
          var $68 = Data_Enum.fromEnum(boundedEnumDay);
          return function ($69) {
              return $67((function (v) {
                  return v - 1 | 0;
              })($68($69)));
          };
      })(),
      Ord0: function () {
          return ordDay;
      }
  };
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["boundedEnumDay"] = boundedEnumDay;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Date"] = $PS["Data.Date"] || {};
  var exports = $PS["Data.Date"];
  var $foreign = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                          
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var eqDate = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
          };
      }
  };
  var ordDate = {
      compare: function (x) {
          return function (y) {
              var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
              if (v1 instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v1 instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
          };
      },
      Eq0: function () {
          return eqDate;
      }
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  exports["canonicalDate"] = canonicalDate;
  exports["ordDate"] = ordDate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Age"] = $PS["Age"] || {};
  var exports = $PS["Age"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                
  var isAge65OrOlder = function (bd) {
      return function (y) {
          var nextYear = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y) + 1 | 0;
          var nextYearMinus65 = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(nextYear - 65 | 0));
          var firstDayOfYear65DaysPrior = Data_Date.canonicalDate(nextYearMinus65)(Data_Bounded.bottom(Data_Date_Component.boundedMonth))(Data_Bounded.bottom(Data_Date_Component.boundedDay));
          return Data_Ord.lessThanOrEq(Data_Date.ordDate)(bd)(firstDayOfYear65DaysPrior);
      };
  };
  exports["isAge65OrOlder"] = isAge65OrOlder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return {
          append: function (f) {
              return function (g) {
                  return function (x) {
                      return append(dictSemigroup)(f(x))(g(x));
                  };
              };
          }
      };
  };
  exports["append"] = append;
  exports["semigroupFn"] = semigroupFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return {
          mempty: function (v) {
              return mempty(dictMonoid);
          },
          Semigroup0: function () {
              return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
          }
      };
  };
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["fold"] = fold;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var apply = function (dict) {
      return dict.apply;
  };
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 285, column 1 - line 285, column 44): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["tail"] = tail;
  exports["index"] = index;
  exports["zipWith"] = zipWith;
  exports["zip"] = zip;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];          
  var pure = function (dict) {
      return dict.pure;
  };
  exports["pure"] = pure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Leaf) {
                  return Leaf.value;
              };
              if (v1 instanceof Two) {
                  return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
              };
              if (v1 instanceof Three) {
                  return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_List = $PS["Data.List"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var $$Set = function (x) {
      return x;
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $71 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($72) {
          return $71(toList($72));
      };
  };
  var fromMap = $$Set;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromMap"] = fromMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Set = $PS["Data.Set"];
  var keys = (function () {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($21) {
          return Data_Set.fromMap($20($21));
      };
  })();
  exports["keys"] = keys;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
  var exports = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];
  var semigroupAdditive = function (dictSemiring) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Semiring.add(dictSemiring)(v)(v1);
              };
          }
      };
  };
  var ordAdditive = function (dictOrd) {
      return dictOrd;
  };
  var monoidAdditive = function (dictSemiring) {
      return {
          mempty: Data_Semiring.zero(dictSemiring),
          Semigroup0: function () {
              return semigroupAdditive(dictSemiring);
          }
      };
  };
  var eqAdditive = function (dictEq) {
      return dictEq;
  };
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["TaxRate"] = $PS["TaxRate"] || {};
  var exports = $PS["TaxRate"];
  var zeroRate = function (dict) {
      return dict.zeroRate;
  };
  var rateToNumber = function (dict) {
      return dict.rateToNumber;
  };
  var absoluteDifference = function (dict) {
      return dict.absoluteDifference;
  };
  exports["zeroRate"] = zeroRate;
  exports["rateToNumber"] = rateToNumber;
  exports["absoluteDifference"] = absoluteDifference;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Moneys"] = $PS["Moneys"] || {};
  var exports = $PS["Moneys"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var $$Math = $PS["Math"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var TaxRate = $PS["TaxRate"];                                               
  var semigroupTaxableIncome = Data_Monoid_Additive.semigroupAdditive(Data_Semiring.semiringNumber);
  var semigroupTaxPayable = Data_Monoid_Additive.semigroupAdditive(Data_Semiring.semiringNumber);     
  var semigroupIncome = Data_Monoid_Additive.semigroupAdditive(Data_Semiring.semiringNumber);
  var semigroupDeduction = Data_Monoid_Additive.semigroupAdditive(Data_Semiring.semiringNumber);
  var monoidTaxPayable = Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber);
  var monoidIncomeThreshold = Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber);
  var monoidDeduction = Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber);
  var eqIncome = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Monoid_Additive.eqAdditive(Data_Eq.eqNumber))(x)(y);
          };
      }
  };
  var ordIncome = {
      compare: function (x) {
          return function (y) {
              return Data_Ord.compare(Data_Monoid_Additive.ordAdditive(Data_Ord.ordNumber))(x)(y);
          };
      },
      Eq0: function () {
          return eqIncome;
      }
  };
  var eqDeduction = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Monoid_Additive.eqAdditive(Data_Eq.eqNumber))(x)(y);
          };
      }
  };
  var ordDeduction = {
      compare: function (x) {
          return function (y) {
              return Data_Ord.compare(Data_Monoid_Additive.ordAdditive(Data_Ord.ordNumber))(x)(y);
          };
      },
      Eq0: function () {
          return eqDeduction;
      }
  };
  var timesImpl = function (dictCoercible) {
      return function (i) {
          return function (m) {
              return Safe_Coerce.coerce()(Data_Int.toNumber(i) * Safe_Coerce.coerce()(m));
          };
      };
  };
  var hasTimesDeduction = {
      times: timesImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var times = function (dict) {
      return dict.times;
  };
  var noMoneyImpl = function (dictMonoid) {
      return Data_Monoid.mempty(dictMonoid);
  };
  var hasNoMoneyDeduction = {
      noMoney: noMoneyImpl(monoidDeduction),
      Monoid0: function () {
          return monoidDeduction;
      }
  };
  var noMoney = function (dict) {
      return dict.noMoney;
  };
  var mulImpl = function (dictCoercible) {
      return function (m) {
          return function (n) {
              return Safe_Coerce.coerce()(n * Safe_Coerce.coerce()(m));
          };
      };
  };
  var hasMulIncome = {
      mul: mulImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var mkMoney = function (d) {
      if (d < 0.0) {
          return Effect_Exception_Unsafe.unsafeThrow("Money can't be negative");
      };
      if (Data_Boolean.otherwise) {
          return Safe_Coerce.coerce()(d);
      };
      throw new Error("Failed pattern match at Moneys (line 77, column 1 - line 77, column 27): " + [ d.constructor.name ]);
  };
  var monus = function (m1) {
      return function (m2) {
          if (Data_Ord.greaterThan(Data_Monoid_Additive.ordAdditive(Data_Ord.ordNumber))(m1)(m2)) {
              return Safe_Coerce.coerce()(Safe_Coerce.coerce()(m1) - Safe_Coerce.coerce()(m2));
          };
          if (Data_Boolean.otherwise) {
              return mkMoney(0.0);
          };
          throw new Error("Failed pattern match at Moneys (line 82, column 1 - line 82, column 33): " + [ m1.constructor.name, m2.constructor.name ]);
      };
  };
  var reduceBy = function (x) {
      return function (y) {
          return Safe_Coerce.coerce()(monus(Safe_Coerce.coerce()(x))(Safe_Coerce.coerce()(y)));
      };
  };
  var makeFromIntImpl = function (dictCoercible) {
      return function (i) {
          return Safe_Coerce.coerce()(Data_Int.toNumber(i));
      };
  };
  var hasMakeFromIntDeduction = {
      makeFromInt: makeFromIntImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var hasMakeFromIntIncome = {
      makeFromInt: makeFromIntImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var hasMakeFromIntIncomeThres = {
      makeFromInt: makeFromIntImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var makeFromInt = function (dict) {
      return dict.makeFromInt;
  };
  var isBelow = function (i) {
      return function (it) {
          return Data_Ord.lessThan(Data_Monoid_Additive.ordAdditive(Data_Ord.ordNumber))(Safe_Coerce.coerce()(i))(Safe_Coerce.coerce()(it));
      };
  };
  var diff = function (m1) {
      return function (m2) {
          return Safe_Coerce.coerce()($$Math.abs(Safe_Coerce.coerce()(m1) - Safe_Coerce.coerce()(m2)));
      };
  };
  var thresholdDifference = function (it1) {
      return function (it2) {
          return Safe_Coerce.coerce()(diff(Safe_Coerce.coerce()(it1))(Safe_Coerce.coerce()(it2)));
      };
  };
  var asTaxable = Safe_Coerce.coerce();
  var applyTaxRate = function (dictTaxRate) {
      return function (rate) {
          return function (income) {
              return Safe_Coerce.coerce()(Safe_Coerce.coerce()(income) * TaxRate.rateToNumber(dictTaxRate)(rate));
          };
      };
  };
  var applyDeductions = function (income) {
      return function (deductions) {
          return Safe_Coerce.coerce()(monus(Safe_Coerce.coerce()(income))(Safe_Coerce.coerce()(deductions)));
      };
  };
  var amountOverThresholdImpl = function (dictCoercible) {
      return function (m) {
          return function (threshold) {
              return Safe_Coerce.coerce()(monus(Safe_Coerce.coerce()(m))(Safe_Coerce.coerce()(threshold)));
          };
      };
  };
  var hasAmountOverThresholdInc = {
      amountOverThreshold: amountOverThresholdImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var hasAmountOverThresholdTax = {
      amountOverThreshold: amountOverThresholdImpl(),
      Coercible0: function () {
          return undefined;
      }
  };
  var amountOverThreshold = function (dict) {
      return dict.amountOverThreshold;
  };
  exports["amountOverThreshold"] = amountOverThreshold;
  exports["applyDeductions"] = applyDeductions;
  exports["applyTaxRate"] = applyTaxRate;
  exports["asTaxable"] = asTaxable;
  exports["isBelow"] = isBelow;
  exports["makeFromInt"] = makeFromInt;
  exports["mul"] = mul;
  exports["noMoney"] = noMoney;
  exports["reduceBy"] = reduceBy;
  exports["thresholdDifference"] = thresholdDifference;
  exports["times"] = times;
  exports["ordIncome"] = ordIncome;
  exports["semigroupIncome"] = semigroupIncome;
  exports["hasAmountOverThresholdInc"] = hasAmountOverThresholdInc;
  exports["hasMakeFromIntIncome"] = hasMakeFromIntIncome;
  exports["hasMulIncome"] = hasMulIncome;
  exports["monoidDeduction"] = monoidDeduction;
  exports["ordDeduction"] = ordDeduction;
  exports["semigroupDeduction"] = semigroupDeduction;
  exports["hasMakeFromIntDeduction"] = hasMakeFromIntDeduction;
  exports["hasNoMoneyDeduction"] = hasNoMoneyDeduction;
  exports["hasTimesDeduction"] = hasTimesDeduction;
  exports["monoidIncomeThreshold"] = monoidIncomeThreshold;
  exports["hasMakeFromIntIncomeThres"] = hasMakeFromIntIncomeThres;
  exports["semigroupTaxableIncome"] = semigroupTaxableIncome;
  exports["hasAmountOverThresholdTax"] = hasAmountOverThresholdTax;
  exports["monoidTaxPayable"] = monoidTaxPayable;
  exports["semigroupTaxPayable"] = semigroupTaxPayable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Brackets"] = $PS["Brackets"] || {};
  var exports = $PS["Brackets"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map = $PS["Data.Map"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Moneys = $PS["Moneys"];                
  var safeBracketWidth = function (dictTaxRate) {
      return function (brackets) {
          return function (rate) {
              var rates = Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(Data_Map.keys(brackets));
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_List.tail(rates))(function (ratesTail) {
                  var pairs = Data_List.zip(rates)(ratesTail);
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Foldable.find(Data_List_Types.foldableList)(function (p) {
                      return Data_Eq.eq((dictTaxRate.Ord0()).Eq0())(Data_Tuple.fst(p))(rate);
                  })(pairs))(function (pair) {
                      var successor = Data_Tuple.snd(pair);
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictTaxRate.Ord0())(rate)(brackets))(function (rateStart) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictTaxRate.Ord0())(successor)(brackets))(function (successorStart) {
                              return new Data_Maybe.Just(Moneys.thresholdDifference(successorStart)(rateStart));
                          });
                      });
                  });
              });
          };
      };
  };
  var fromRPairs = function (dictTaxRate) {
      return function (tuples) {
          return function (mkRate) {
              var f = function (v) {
                  return new Data_Tuple.Tuple(mkRate(v.value1 / 100.0), Moneys.makeFromInt(Moneys.hasMakeFromIntIncomeThres)(v.value0));
              };
              return Data_Map_Internal.fromFoldable(dictTaxRate.Ord0())(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(f)(tuples));
          };
      };
  };
  var bracketWidth = function (dictTaxRate) {
      return function (brackets) {
          return function (rate) {
              return Data_Maybe.fromJust()(safeBracketWidth(dictTaxRate)(brackets)(rate));
          };
      };
  };
  exports["bracketWidth"] = bracketWidth;
  exports["fromRPairs"] = fromRPairs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.String.Read"] = $PS["Data.String.Read"] || {};
  var exports = $PS["Data.String.Read"];
  var read = function (dict) {
      return dict.read;
  };
  exports["read"] = read;
})(PS);
(function($PS) {
  "use strict";
  $PS["CommonTypes"] = $PS["CommonTypes"] || {};
  var exports = $PS["CommonTypes"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_Read = $PS["Data.String.Read"];
  var Married = (function () {
      function Married() {

      };
      Married.value = new Married();
      return Married;
  })();
  var HeadOfHousehold = (function () {
      function HeadOfHousehold() {

      };
      HeadOfHousehold.value = new HeadOfHousehold();
      return HeadOfHousehold;
  })();
  var Single = (function () {
      function Single() {

      };
      Single.value = new Single();
      return Single;
  })();                           
  var readFilingStatus = {
      read: function (s) {
          if (s === "Married") {
              return new Data_Maybe.Just(Married.value);
          };
          if (s === "HOH") {
              return new Data_Maybe.Just(HeadOfHousehold.value);
          };
          if (s === "HeadOfHousehold") {
              return new Data_Maybe.Just(HeadOfHousehold.value);
          };
          if (s === "Single") {
              return new Data_Maybe.Just(Single.value);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var eqAge = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var ordAge = {
      compare: function (x) {
          return function (y) {
              return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
      },
      Eq0: function () {
          return eqAge;
      }
  };
  var unsafeReadFilingStatus = function (s) {
      return Data_Maybe.fromJust()(Data_String_Read.read(readFilingStatus)(s));
  };
  var isUnmarried = function (v) {
      if (v instanceof Married) {
          return false;
      };
      return true;
  };
  exports["Married"] = Married;
  exports["HeadOfHousehold"] = HeadOfHousehold;
  exports["Single"] = Single;
  exports["isUnmarried"] = isUnmarried;
  exports["unsafeReadFilingStatus"] = unsafeReadFilingStatus;
  exports["ordAge"] = ordAge;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  exports["fold"] = fold;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Interpolate"] = $PS["Data.Interpolate"] || {};
  var exports = $PS["Data.Interpolate"];           
  var interpString = {
      interp: function (a) {
          return a;
      }
  };
  var interp = function (dict) {
      return dict.interp;
  };
  var interpStringFunction = function (dictInterp) {
      return {
          interp: function (a) {
              return function (b) {
                  return interp(dictInterp)(a + b);
              };
          }
      };
  };
  var i = function (dictInterp) {
      return interp(dictInterp)("");
  };
  exports["i"] = i;
  exports["interpString"] = interpString;
  exports["interpStringFunction"] = interpStringFunction;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.FederalTaxRate"] = $PS["Federal.FederalTaxRate"] || {};
  var exports = $PS["Federal.FederalTaxRate"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Interpolate = $PS["Data.Interpolate"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var $$Math = $PS["Math"];                     
  var ordFederalTaxRate = Data_Ord.ordNumber;
  var mkFederalTaxRate = function (d) {
      if (d < 0.0) {
          return Effect_Exception_Unsafe.unsafeThrow(Data_Interpolate.i(Data_Interpolate.interpStringFunction(Data_Interpolate.interpStringFunction(Data_Interpolate.interpString)))("Invalid FederalTaxRate ")(Data_Show.show(Data_Show.showNumber)(d)));
      };
      if (d > 0.9) {
          return Effect_Exception_Unsafe.unsafeThrow(Data_Interpolate.i(Data_Interpolate.interpStringFunction(Data_Interpolate.interpStringFunction(Data_Interpolate.interpString)))("Invalid FederalTaxRate ")(Data_Show.show(Data_Show.showNumber)(d)));
      };
      if (Data_Boolean.otherwise) {
          return d;
      };
      throw new Error("Failed pattern match at Federal.FederalTaxRate (line 17, column 1 - line 17, column 45): " + [ d.constructor.name ]);
  };
  var taxRateFederalTaxRate = {
      zeroRate: mkFederalTaxRate(0.0),
      rateToNumber: function (v) {
          return v;
      },
      absoluteDifference: function (v) {
          return function (v1) {
              return $$Math.abs(v - v1);
          };
      },
      Ord0: function () {
          return ordFederalTaxRate;
      }
  };
  exports["mkFederalTaxRate"] = mkFederalTaxRate;
  exports["taxRateFederalTaxRate"] = taxRateFederalTaxRate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["TaxFunction"] = $PS["TaxFunction"] || {};
  var exports = $PS["TaxFunction"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Moneys = $PS["Moneys"];
  var TaxRate = $PS["TaxRate"];                
  var thresholdTaxFunction = function (dictTaxRate) {
      return function (threshold) {
          return function (rate) {
              return function (ti) {
                  return Moneys.applyTaxRate(dictTaxRate)(rate)(Moneys.amountOverThreshold(Moneys.hasAmountOverThresholdTax)(ti)(threshold));
              };
          };
      };
  };
  var rateDeltasForBrackets = function (dictTaxRate) {
      return function (brackets) {
          var pairs = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(brackets);
          var rates = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.fst)(pairs);
          var thresholds = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(pairs);
          var deltas = Data_List.zipWith(TaxRate.absoluteDifference(dictTaxRate))(new Data_List_Types.Cons(TaxRate.zeroRate(dictTaxRate), rates))(rates);
          return Data_List.zip(thresholds)(deltas);
      };
  };
  var flatTaxFunction = function (dictTaxRate) {
      return thresholdTaxFunction(dictTaxRate)(Data_Monoid.mempty(Moneys.monoidIncomeThreshold));
  };
  var bracketsTaxFunction = function (dictTaxRate) {
      return function (brackets) {
          var pairs = rateDeltasForBrackets(dictTaxRate)(brackets);
          var taxFuncs = Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.uncurry(thresholdTaxFunction(dictTaxRate)))(pairs);
          return Data_Foldable.fold(Data_List_Types.foldableList)(Data_Monoid.monoidFn(Moneys.monoidTaxPayable))(taxFuncs);
      };
  };
  exports["bracketsTaxFunction"] = bracketsTaxFunction;
  exports["flatTaxFunction"] = flatTaxFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.OrdinaryBrackets"] = $PS["Federal.OrdinaryBrackets"] || {};
  var exports = $PS["Federal.OrdinaryBrackets"];
  var Brackets = $PS["Brackets"];
  var Federal_FederalTaxRate = $PS["Federal.FederalTaxRate"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var TaxFunction = $PS["TaxFunction"];
  var taxFunctionFor = function (v) {
      return TaxFunction.bracketsTaxFunction(Federal_FederalTaxRate.taxRateFederalTaxRate)(v);
  };
  var ordinaryIncomeBracketWidth = function (brackets) {
      return Brackets.bracketWidth(Federal_FederalTaxRate.taxRateFederalTaxRate)(Safe_Coerce.coerce()(brackets));
  };
  var fromRPairs = function (pairs) {
      return Safe_Coerce.coerce()(Brackets.fromRPairs(Federal_FederalTaxRate.taxRateFederalTaxRate)(pairs)(Federal_FederalTaxRate.mkFederalTaxRate));
  };
  exports["fromRPairs"] = fromRPairs;
  exports["ordinaryIncomeBracketWidth"] = ordinaryIncomeBracketWidth;
  exports["taxFunctionFor"] = taxFunctionFor;
})(PS);
(function($PS) {
  "use strict";
  $PS["Federal.QualifiedBrackets"] = $PS["Federal.QualifiedBrackets"] || {};
  var exports = $PS["Federal.QualifiedBrackets"];
  var Brackets = $PS["Brackets"];
  var Data_List = $PS["Data.List"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Federal_FederalTaxRate = $PS["Federal.FederalTaxRate"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var TaxFunction = $PS["TaxFunction"];
  var taxFunctionFor = function (v) {
      return TaxFunction.bracketsTaxFunction(Federal_FederalTaxRate.taxRateFederalTaxRate)(v);
  };
  var startOfNonZeroQualifiedRateBracket = function (v) {
      return Data_Maybe.fromJust()(Data_List.index(Data_Map_Internal.values(v))(1));
  };

  //TODO delete
  var fromRPairs = function (pairs) {
      return Safe_Coerce.coerce()(Brackets.fromRPairs(Federal_FederalTaxRate.taxRateFederalTaxRate)(pairs)(Federal_FederalTaxRate.mkFederalTaxRate));
  };
  exports["fromRPairs"] = fromRPairs;
  exports["startOfNonZeroQualifiedRateBracket"] = startOfNonZeroQualifiedRateBracket;
  exports["taxFunctionFor"] = taxFunctionFor;
})(PS);
(function($PS) {
  "use strict";
  $PS["Federal.Regime"] = $PS["Federal.Regime"] || {};
  var exports = $PS["Federal.Regime"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Read = $PS["Data.String.Read"];                
  var Trump = (function () {
      function Trump() {

      };
      Trump.value = new Trump();
      return Trump;
  })();
  var PreTrump = (function () {
      function PreTrump() {

      };
      PreTrump.value = new PreTrump();
      return PreTrump;
  })();
  var readRegime = {
      read: function (s) {
          if (s === "Trump") {
              return new Data_Maybe.Just(Trump.value);
          };
          if (s === "PreTrump") {
              return new Data_Maybe.Just(PreTrump.value);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var unsafeReadRegime = function (s) {
      return Data_Maybe.fromJust()(Data_String_Read.read(readRegime)(s));
  };
  exports["Trump"] = Trump;
  exports["PreTrump"] = PreTrump;
  exports["unsafeReadRegime"] = unsafeReadRegime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["UnsafeDates"] = $PS["UnsafeDates"] || {};
  var exports = $PS["UnsafeDates"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeMakeYear = function (i) {
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(i));
  };
  var unsafeMakeMonth = function (i) {
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(i));
  };
  var unsafeMakeDay = function (i) {
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(i));
  };
  var unsafeMakeDate = function (y) {
      return function (m) {
          return function (d) {
              return Data_Date.canonicalDate(unsafeMakeYear(y))(unsafeMakeMonth(m))(unsafeMakeDay(d));
          };
      };
  };
  exports["unsafeMakeDate"] = unsafeMakeDate;
  exports["unsafeMakeDay"] = unsafeMakeDay;
  exports["unsafeMakeMonth"] = unsafeMakeMonth;
  exports["unsafeMakeYear"] = unsafeMakeYear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2016"] = $PS["Federal.Yearly.Year2016"] || {};
  var exports = $PS["Federal.Yearly.Year2016"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.PreTrump.value,
      year: UnsafeDates.unsafeMakeYear(2016),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(4050),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12600);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(9300);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(6300);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2016 (line 20, column 7 - line 23, column 35): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1250),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(300),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(18550, 15.0), new Data_Tuple.Tuple(75300, 25.0), new Data_Tuple.Tuple(151900, 28.0), new Data_Tuple.Tuple(231450, 33.0), new Data_Tuple.Tuple(413350, 35.0), new Data_Tuple.Tuple(466950, 39.6) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(13250, 15.0), new Data_Tuple.Tuple(50400, 25.0), new Data_Tuple.Tuple(130150, 28.0), new Data_Tuple.Tuple(210800, 33.0), new Data_Tuple.Tuple(413350, 35.0), new Data_Tuple.Tuple(441000, 39.6) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9275, 15.0), new Data_Tuple.Tuple(37650, 25.0), new Data_Tuple.Tuple(91150, 28.0), new Data_Tuple.Tuple(190150, 33.0), new Data_Tuple.Tuple(413350, 35.0), new Data_Tuple.Tuple(415050, 39.6) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2016 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(75300, 15.0), new Data_Tuple.Tuple(466950, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(50400, 15.0), new Data_Tuple.Tuple(441000, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(37650, 15.0), new Data_Tuple.Tuple(415050, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2016 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2017"] = $PS["Federal.Yearly.Year2017"] || {};
  var exports = $PS["Federal.Yearly.Year2017"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.PreTrump.value,
      year: UnsafeDates.unsafeMakeYear(2017),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(4050),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12700);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(9350);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(6350);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2017 (line 20, column 7 - line 23, column 35): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1250),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(300),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(18650, 15.0), new Data_Tuple.Tuple(75900, 25.0), new Data_Tuple.Tuple(153100, 28.0), new Data_Tuple.Tuple(233350, 33.0), new Data_Tuple.Tuple(416700, 35.0), new Data_Tuple.Tuple(470700, 39.6) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(13350, 15.0), new Data_Tuple.Tuple(50800, 25.0), new Data_Tuple.Tuple(131200, 28.0), new Data_Tuple.Tuple(212500, 33.0), new Data_Tuple.Tuple(416700, 35.0), new Data_Tuple.Tuple(444550, 39.6) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9325, 15.0), new Data_Tuple.Tuple(37950, 25.0), new Data_Tuple.Tuple(91900, 28.0), new Data_Tuple.Tuple(191650, 33.0), new Data_Tuple.Tuple(416700, 35.0), new Data_Tuple.Tuple(418400, 39.6) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2017 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(75900, 15.0), new Data_Tuple.Tuple(470700, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(50800, 15.0), new Data_Tuple.Tuple(444550, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(37950, 15.0), new Data_Tuple.Tuple(418400, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2017 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2018"] = $PS["Federal.Yearly.Year2018"] || {};
  var exports = $PS["Federal.Yearly.Year2018"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.Trump.value,
      year: UnsafeDates.unsafeMakeYear(2018),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(0),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(24000);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(18000);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12000);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2018 (line 20, column 7 - line 23, column 36): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1300),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(300),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(19050, 12.0), new Data_Tuple.Tuple(77400, 22.0), new Data_Tuple.Tuple(165000, 24.0), new Data_Tuple.Tuple(315000, 32.0), new Data_Tuple.Tuple(400000, 35.0), new Data_Tuple.Tuple(600000, 37.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(13600, 12.0), new Data_Tuple.Tuple(51800, 22.0), new Data_Tuple.Tuple(82500, 24.0), new Data_Tuple.Tuple(157500, 32.0), new Data_Tuple.Tuple(200000, 35.0), new Data_Tuple.Tuple(500000, 37.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9525, 12.0), new Data_Tuple.Tuple(38700, 22.0), new Data_Tuple.Tuple(82500, 24.0), new Data_Tuple.Tuple(157500, 32.0), new Data_Tuple.Tuple(200000, 35.0), new Data_Tuple.Tuple(500000, 37.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2018 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(77200, 15.0), new Data_Tuple.Tuple(479000, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(51700, 15.0), new Data_Tuple.Tuple(452400, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(38600, 15.0), new Data_Tuple.Tuple(425800, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2018 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2019"] = $PS["Federal.Yearly.Year2019"] || {};
  var exports = $PS["Federal.Yearly.Year2019"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.Trump.value,
      year: UnsafeDates.unsafeMakeYear(2019),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(0),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(24400);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(18350);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12200);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2019 (line 20, column 7 - line 23, column 36): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1300),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(350),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(19400, 12.0), new Data_Tuple.Tuple(78950, 22.0), new Data_Tuple.Tuple(168400, 24.0), new Data_Tuple.Tuple(321450, 32.0), new Data_Tuple.Tuple(408200, 35.0), new Data_Tuple.Tuple(612350, 37.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(13850, 12.0), new Data_Tuple.Tuple(52850, 22.0), new Data_Tuple.Tuple(84200, 24.0), new Data_Tuple.Tuple(160700, 32.0), new Data_Tuple.Tuple(204100, 35.0), new Data_Tuple.Tuple(510300, 37.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9700, 12.0), new Data_Tuple.Tuple(39475, 22.0), new Data_Tuple.Tuple(84200, 24.0), new Data_Tuple.Tuple(160725, 32.0), new Data_Tuple.Tuple(204100, 35.0), new Data_Tuple.Tuple(510300, 37.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2019 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(78750, 15.0), new Data_Tuple.Tuple(488850, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(52750, 15.0), new Data_Tuple.Tuple(461700, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(39375, 15.0), new Data_Tuple.Tuple(434550, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2019 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2020"] = $PS["Federal.Yearly.Year2020"] || {};
  var exports = $PS["Federal.Yearly.Year2020"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.Trump.value,
      year: UnsafeDates.unsafeMakeYear(2020),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(0),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(24800);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(18650);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12400);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2020 (line 20, column 7 - line 23, column 36): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1300),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(350),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(19750, 12.0), new Data_Tuple.Tuple(80250, 22.0), new Data_Tuple.Tuple(171050, 24.0), new Data_Tuple.Tuple(326600, 32.0), new Data_Tuple.Tuple(414700, 35.0), new Data_Tuple.Tuple(622050, 37.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(14100, 12.0), new Data_Tuple.Tuple(53700, 22.0), new Data_Tuple.Tuple(85500, 24.0), new Data_Tuple.Tuple(163300, 32.0), new Data_Tuple.Tuple(207350, 35.0), new Data_Tuple.Tuple(518400, 37.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9875, 12.0), new Data_Tuple.Tuple(40125, 22.0), new Data_Tuple.Tuple(85525, 24.0), new Data_Tuple.Tuple(163300, 32.0), new Data_Tuple.Tuple(207350, 35.0), new Data_Tuple.Tuple(518400, 37.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2020 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(80000, 15.0), new Data_Tuple.Tuple(496600, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(53600, 15.0), new Data_Tuple.Tuple(469050, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(40000, 15.0), new Data_Tuple.Tuple(442450, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2020 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2021"] = $PS["Federal.Yearly.Year2021"] || {};
  var exports = $PS["Federal.Yearly.Year2021"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.Trump.value,
      year: UnsafeDates.unsafeMakeYear(2021),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(0),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(25100);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(18800);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12550);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2021 (line 20, column 7 - line 23, column 36): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1350),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(350),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(19900, 12.0), new Data_Tuple.Tuple(81050, 22.0), new Data_Tuple.Tuple(172750, 24.0), new Data_Tuple.Tuple(329850, 32.0), new Data_Tuple.Tuple(418850, 35.0), new Data_Tuple.Tuple(628300, 37.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(14200, 12.0), new Data_Tuple.Tuple(54200, 22.0), new Data_Tuple.Tuple(86350, 24.0), new Data_Tuple.Tuple(164900, 32.0), new Data_Tuple.Tuple(209400, 35.0), new Data_Tuple.Tuple(523600, 37.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(9950, 12.0), new Data_Tuple.Tuple(40525, 22.0), new Data_Tuple.Tuple(86375, 24.0), new Data_Tuple.Tuple(164925, 32.0), new Data_Tuple.Tuple(209425, 35.0), new Data_Tuple.Tuple(523600, 37.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2021 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(80800, 15.0), new Data_Tuple.Tuple(501600, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(54100, 15.0), new Data_Tuple.Tuple(473750, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(40400, 15.0), new Data_Tuple.Tuple(445850, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2021 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.Year2022"] = $PS["Federal.Yearly.Year2022"] || {};
  var exports = $PS["Federal.Yearly.Year2022"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Moneys = $PS["Moneys"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var values = {
      regime: Federal_Regime.Trump.value,
      year: UnsafeDates.unsafeMakeYear(2022),
      perPersonExemption: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(0),
      unadjustedStandardDeduction: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(25900);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(19400);
          };
          if (v instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(12950);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2022 (line 20, column 7 - line 23, column 36): " + [ v.constructor.name ]);
      },
      adjustmentWhenOver65: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1400),
      adjustmentWhenOver65AndSingle: Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(350),
      ordinaryBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(20550, 12.0), new Data_Tuple.Tuple(83550, 22.0), new Data_Tuple.Tuple(178150, 24.0), new Data_Tuple.Tuple(340100, 32.0), new Data_Tuple.Tuple(431900, 35.0), new Data_Tuple.Tuple(647850, 37.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(14650, 12.0), new Data_Tuple.Tuple(55900, 22.0), new Data_Tuple.Tuple(89050, 24.0), new Data_Tuple.Tuple(170050, 32.0), new Data_Tuple.Tuple(215950, 35.0), new Data_Tuple.Tuple(539900, 37.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_OrdinaryBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 10.0), new Data_Tuple.Tuple(10275, 12.0), new Data_Tuple.Tuple(41775, 22.0), new Data_Tuple.Tuple(89075, 24.0), new Data_Tuple.Tuple(170050, 32.0), new Data_Tuple.Tuple(215950, 35.0), new Data_Tuple.Tuple(539900, 37.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2022 (line 27, column 7 - line 57, column 14): " + [ v.constructor.name ]);
      },
      qualifiedBrackets: function (v) {
          if (v instanceof CommonTypes.Married) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(83350, 15.0), new Data_Tuple.Tuple(517200, 20.0) ]);
          };
          if (v instanceof CommonTypes.HeadOfHousehold) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(55800, 15.0), new Data_Tuple.Tuple(488500, 20.0) ]);
          };
          if (v instanceof CommonTypes.Single) {
              return Federal_QualifiedBrackets.fromRPairs([ new Data_Tuple.Tuple(0, 0.0), new Data_Tuple.Tuple(41675, 15.0), new Data_Tuple.Tuple(459750, 20.0) ]);
          };
          throw new Error("Failed pattern match at Federal.Yearly.Year2022 (line 59, column 7 - line 77, column 14): " + [ v.constructor.name ]);
      }
  };
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Yearly.YearlyValues"] = $PS["Federal.Yearly.YearlyValues"] || {};
  var exports = $PS["Federal.Yearly.YearlyValues"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Federal_Yearly_Year2016 = $PS["Federal.Yearly.Year2016"];
  var Federal_Yearly_Year2017 = $PS["Federal.Yearly.Year2017"];
  var Federal_Yearly_Year2018 = $PS["Federal.Yearly.Year2018"];
  var Federal_Yearly_Year2019 = $PS["Federal.Yearly.Year2019"];
  var Federal_Yearly_Year2020 = $PS["Federal.Yearly.Year2020"];
  var Federal_Yearly_Year2021 = $PS["Federal.Yearly.Year2021"];
  var Federal_Yearly_Year2022 = $PS["Federal.Yearly.Year2022"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var forYear = Data_Map_Internal.fromFoldable(Data_Date_Component.ordYear)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
      return new Data_Tuple.Tuple(UnsafeDates.unsafeMakeYear(v.value0), v.value1);
  })([ new Data_Tuple.Tuple(2016, Federal_Yearly_Year2016.values), new Data_Tuple.Tuple(2017, Federal_Yearly_Year2017.values), new Data_Tuple.Tuple(2018, Federal_Yearly_Year2018.values), new Data_Tuple.Tuple(2019, Federal_Yearly_Year2019.values), new Data_Tuple.Tuple(2020, Federal_Yearly_Year2020.values), new Data_Tuple.Tuple(2021, Federal_Yearly_Year2021.values), new Data_Tuple.Tuple(2022, Federal_Yearly_Year2022.values) ]));
  var unsafeValuesForYear = function (y) {
      return Data_Maybe.fromJust()(Data_Map_Internal.lookup(Data_Date_Component.ordYear)(y)(forYear));
  };
  exports["unsafeValuesForYear"] = unsafeValuesForYear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.BoundRegime"] = $PS["Federal.BoundRegime"] || {};
  var exports = $PS["Federal.BoundRegime"];
  var Age = $PS["Age"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Federal_Yearly_YearlyValues = $PS["Federal.Yearly.YearlyValues"];
  var Moneys = $PS["Moneys"];                
  var BoundRegime = function (x) {
      return x;
  };                                                                                                                                                                                                                                                                                                                                                                 
  var standardDeduction = function (v) {
      return Data_Semigroup.append(Moneys.semigroupDeduction)(v.unadjustedStandardDeduction)((function () {
          var $5 = Age.isAge65OrOlder(v.birthDate)(v.year);
          if ($5) {
              return Data_Semigroup.append(Moneys.semigroupDeduction)(v.adjustmentWhenOver65)((function () {
                  var $6 = CommonTypes.isUnmarried(v.filingStatus);
                  if ($6) {
                      return v.adjustmentWhenOver65AndSingle;
                  };
                  return Moneys.noMoney(Moneys.hasNoMoneyDeduction);
              })());
          };
          return Moneys.noMoney(Moneys.hasNoMoneyDeduction);
      })());
  };
  var personalExemptionDeduction = function (v) {
      return Moneys.times(Moneys.hasTimesDeduction)(v.personalExemptions)(v.perPersonExemption);
  };
  var netDeduction = function (br) {
      return function (itemized) {
          return Data_Semigroup.append(Moneys.semigroupDeduction)(personalExemptionDeduction(br))(Data_Ord.max(Moneys.ordDeduction)(itemized)(standardDeduction(br)));
      };
  };
  var boundRegimeForKnownYear = function (y) {
      return function (bd) {
          return function (fs) {
              return function (pe) {
                  var yvs = Federal_Yearly_YearlyValues.unsafeValuesForYear(y);
                  return {
                      regime: yvs.regime,
                      year: y,
                      birthDate: bd,
                      filingStatus: fs,
                      personalExemptions: pe,
                      perPersonExemption: yvs.perPersonExemption,
                      unadjustedStandardDeduction: yvs.unadjustedStandardDeduction(fs),
                      adjustmentWhenOver65: yvs.adjustmentWhenOver65,
                      adjustmentWhenOver65AndSingle: yvs.adjustmentWhenOver65AndSingle,
                      ordinaryBrackets: yvs.ordinaryBrackets(fs),
                      qualifiedBrackets: yvs.qualifiedBrackets(fs)
                  };
              };
          };
      };
  };
  exports["BoundRegime"] = BoundRegime;
  exports["boundRegimeForKnownYear"] = boundRegimeForKnownYear;
  exports["netDeduction"] = netDeduction;
  exports["personalExemptionDeduction"] = personalExemptionDeduction;
  exports["standardDeduction"] = standardDeduction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.TaxFunctions"] = $PS["Federal.TaxFunctions"] || {};
  var exports = $PS["Federal.TaxFunctions"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Moneys = $PS["Moneys"];                
  var taxDueOnQualifiedIncome = function (brackets) {
      return function (taxableOrdinaryIncome) {
          return function (qualifiedIncome) {
              var taxFunction = Federal_QualifiedBrackets.taxFunctionFor(brackets);
              var taxOnBoth = taxFunction(Data_Semigroup.append(Moneys.semigroupTaxableIncome)(taxableOrdinaryIncome)(qualifiedIncome));
              var taxOnOrdinary = taxFunction(taxableOrdinaryIncome);
              return Moneys.reduceBy(taxOnBoth)(taxOnOrdinary);
          };
      };
  };
  var taxDueOnOrdinaryIncome = Federal_OrdinaryBrackets.taxFunctionFor;
  exports["taxDueOnOrdinaryIncome"] = taxDueOnOrdinaryIncome;
  exports["taxDueOnQualifiedIncome"] = taxDueOnQualifiedIncome;
})(PS);
(function($PS) {
  "use strict";
  $PS["Federal.TaxableSocialSecurity"] = $PS["Federal.TaxableSocialSecurity"] || {};
  var exports = $PS["Federal.TaxableSocialSecurity"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Moneys = $PS["Moneys"];                
  var amountTaxable = function (filingStatus) {
      return function (ssBenefits) {
          return function (relevantIncome) {
              var f = function (combinedIncome) {
                  return function (v) {
                      if (Moneys.isBelow(combinedIncome)(v.value0)) {
                          return Moneys.makeFromInt(Moneys.hasMakeFromIntIncome)(0);
                      };
                      if (Moneys.isBelow(combinedIncome)(v.value1)) {
                          var maxSocSecTaxable = Moneys.mul(Moneys.hasMulIncome)(ssBenefits)(0.5);
                          return Data_Ord.min(Moneys.ordIncome)(Moneys.mul(Moneys.hasMulIncome)(Moneys.amountOverThreshold(Moneys.hasAmountOverThresholdInc)(combinedIncome)(v.value0))(0.5))(maxSocSecTaxable);
                      };
                      if (true) {
                          var maxSocSecTaxable = Moneys.mul(Moneys.hasMulIncome)(ssBenefits)(0.85);
                          return Data_Ord.min(Moneys.ordIncome)(Data_Semigroup.append(Moneys.semigroupIncome)(Moneys.makeFromInt(Moneys.hasMakeFromIntIncome)(4500))(Moneys.mul(Moneys.hasMulIncome)(Moneys.amountOverThreshold(Moneys.hasAmountOverThresholdInc)(combinedIncome)(v.value1))(0.85)))(maxSocSecTaxable);
                      };
                      throw new Error("Failed pattern match at Federal.TaxableSocialSecurity (line 49, column 3 - line 49, column 73): " + [ combinedIncome.constructor.name, v.constructor.name ]);
                  };
              };
              var lowBase = Moneys.makeFromInt(Moneys.hasMakeFromIntIncomeThres)((function () {
                  if (filingStatus instanceof CommonTypes.Married) {
                      return 32000;
                  };
                  if (filingStatus instanceof CommonTypes.HeadOfHousehold) {
                      return 25000;
                  };
                  if (filingStatus instanceof CommonTypes.Single) {
                      return 25000;
                  };
                  throw new Error("Failed pattern match at Federal.TaxableSocialSecurity (line 30, column 9 - line 33, column 26): " + [ filingStatus.constructor.name ]);
              })());
              var highBase = Moneys.makeFromInt(Moneys.hasMakeFromIntIncomeThres)((function () {
                  if (filingStatus instanceof CommonTypes.Married) {
                      return 44000;
                  };
                  if (filingStatus instanceof CommonTypes.HeadOfHousehold) {
                      return 34000;
                  };
                  if (filingStatus instanceof CommonTypes.Single) {
                      return 34000;
                  };
                  throw new Error("Failed pattern match at Federal.TaxableSocialSecurity (line 38, column 9 - line 41, column 26): " + [ filingStatus.constructor.name ]);
              })());
              var combinedIncome = Data_Semigroup.append(Moneys.semigroupIncome)(relevantIncome)(Moneys.mul(Moneys.hasMulIncome)(ssBenefits)(0.5));
              return f(combinedIncome)(new Data_Tuple.Tuple(lowBase, highBase));
          };
      };
  };
  var amountTaxableInflationAdjusted = function (year) {
      return function (filingStatus) {
          return function (ssBenefits) {
              return function (relevantIncome) {
                  var unadjusted = amountTaxable(filingStatus)(ssBenefits)(relevantIncome);
                  var adjustmentFactor = 1.0 + 3.0e-2 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(year) - 2021 | 0);
                  var adjusted = Moneys.mul(Moneys.hasMulIncome)(unadjusted)(adjustmentFactor);
                  return Data_Ord.min(Moneys.ordIncome)(adjusted)(Moneys.mul(Moneys.hasMulIncome)(ssBenefits)(0.85));
              };
          };
      };
  };
  exports["amountTaxableInflationAdjusted"] = amountTaxableInflationAdjusted;
  exports["amountTaxable"] = amountTaxable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.Calculator"] = $PS["Federal.Calculator"] || {};
  var exports = $PS["Federal.Calculator"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Federal_BoundRegime = $PS["Federal.BoundRegime"];
  var Federal_TaxFunctions = $PS["Federal.TaxFunctions"];
  var Federal_TaxableSocialSecurity = $PS["Federal.TaxableSocialSecurity"];
  var Moneys = $PS["Moneys"];                                                                                                                                                                                                                                     
  var makeCalculator = function (br) {
      return function (socSec) {
          return function (ordinaryIncome) {
              return function (qualifiedIncome) {
                  return function (itemized) {
                      var ssRelevantOtherIncome = Data_Semigroup.append(Moneys.semigroupIncome)(ordinaryIncome)(qualifiedIncome);
                      var taxableSocSec = Federal_TaxableSocialSecurity.amountTaxable(br.filingStatus)(socSec)(ssRelevantOtherIncome);
                      var taxableOrdinaryIncome = Moneys.applyDeductions(Data_Semigroup.append(Moneys.semigroupIncome)(taxableSocSec)(ordinaryIncome))(Federal_BoundRegime.netDeduction(br)(itemized));
                      var taxOnOrdinaryIncome = Federal_TaxFunctions.taxDueOnOrdinaryIncome(br.ordinaryBrackets)(taxableOrdinaryIncome);
                      var taxOnQualifiedIncome = Federal_TaxFunctions.taxDueOnQualifiedIncome(br.qualifiedBrackets)(taxableOrdinaryIncome)(Moneys.asTaxable(qualifiedIncome));
                      return {
                          boundRegime: br,
                          ssRelevantOtherIncome: ssRelevantOtherIncome,
                          taxableSocSec: taxableSocSec,
                          finalStandardDeduction: Federal_BoundRegime.standardDeduction(br),
                          finalPersonalExemptionDeduction: Federal_BoundRegime.personalExemptionDeduction(br),
                          finalNetDeduction: Federal_BoundRegime.netDeduction(br)(itemized),
                          taxableOrdinaryIncome: taxableOrdinaryIncome,
                          taxOnOrdinaryIncome: taxOnOrdinaryIncome,
                          taxOnQualifiedIncome: taxOnQualifiedIncome
                      };
                  };
              };
          };
      };
  };
  var taxResultsForKnownYear = function (year) {
      return function (birthDate) {
          return function (filingStatus) {
              return function (personalExemptions) {
                  return function (socSec) {
                      return function (ordinaryIncome) {
                          return function (qualifiedIncome) {
                              return function (itemized) {
                                  var boundRegime = Federal_BoundRegime.boundRegimeForKnownYear(year)(birthDate)(filingStatus)(personalExemptions);
                                  var calculator = makeCalculator(boundRegime);
                                  return calculator(socSec)(ordinaryIncome)(qualifiedIncome)(itemized);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var taxDueForKnownYear = function (year) {
      return function (filingStatus) {
          return function (birthDate) {
              return function (personalExemptions) {
                  return function (socSec) {
                      return function (ordinaryIncome) {
                          return function (qualifiedIncome) {
                              return function (itemized) {
                                  var v = taxResultsForKnownYear(year)(birthDate)(filingStatus)(personalExemptions)(socSec)(ordinaryIncome)(qualifiedIncome)(itemized);
                                  return Data_Semigroup.append(Moneys.semigroupTaxPayable)(v.taxOnOrdinaryIncome)(v.taxOnQualifiedIncome);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["taxDueForKnownYear"] = taxDueForKnownYear;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Federal.RMDs"] = $PS["Federal.RMDs"] || {};
  var exports = $PS["Federal.RMDs"];
  var CommonTypes = $PS["CommonTypes"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var distributionPeriods = Data_Map_Internal.fromFoldable(CommonTypes.ordAge)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(70, 27.4), new Data_Tuple.Tuple(71, 26.5), new Data_Tuple.Tuple(72, 25.6), new Data_Tuple.Tuple(73, 24.7), new Data_Tuple.Tuple(74, 23.8), new Data_Tuple.Tuple(75, 22.9), new Data_Tuple.Tuple(76, 22.0), new Data_Tuple.Tuple(77, 21.2), new Data_Tuple.Tuple(78, 20.3), new Data_Tuple.Tuple(79, 19.5), new Data_Tuple.Tuple(80, 18.7), new Data_Tuple.Tuple(81, 17.9), new Data_Tuple.Tuple(82, 17.1), new Data_Tuple.Tuple(83, 16.3), new Data_Tuple.Tuple(84, 15.5), new Data_Tuple.Tuple(85, 14.8), new Data_Tuple.Tuple(86, 14.1), new Data_Tuple.Tuple(87, 13.4), new Data_Tuple.Tuple(88, 12.7), new Data_Tuple.Tuple(89, 12.0), new Data_Tuple.Tuple(90, 11.4), new Data_Tuple.Tuple(91, 10.8), new Data_Tuple.Tuple(92, 10.2), new Data_Tuple.Tuple(93, 9.6), new Data_Tuple.Tuple(94, 9.1), new Data_Tuple.Tuple(95, 8.6), new Data_Tuple.Tuple(96, 8.1), new Data_Tuple.Tuple(97, 7.6), new Data_Tuple.Tuple(98, 7.1), new Data_Tuple.Tuple(99, 6.7), new Data_Tuple.Tuple(100, 6.3), new Data_Tuple.Tuple(101, 5.9), new Data_Tuple.Tuple(102, 5.5), new Data_Tuple.Tuple(103, 5.2), new Data_Tuple.Tuple(104, 4.9), new Data_Tuple.Tuple(105, 4.5), new Data_Tuple.Tuple(106, 4.2), new Data_Tuple.Tuple(107, 3.9), new Data_Tuple.Tuple(108, 3.7), new Data_Tuple.Tuple(109, 3.4), new Data_Tuple.Tuple(110, 3.1), new Data_Tuple.Tuple(111, 2.9), new Data_Tuple.Tuple(112, 2.6), new Data_Tuple.Tuple(113, 2.4), new Data_Tuple.Tuple(114, 2.1) ]);
  var rmdFractionForAge = function (age) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(CommonTypes.ordAge)(age)(distributionPeriods))(function (distributionPeriod) {
          return new Data_Maybe.Just(1.0 / distributionPeriod);
      });
  };
  var unsafeRmdFractionForAge = function (age) {
      return Data_Maybe.fromJust()(rmdFractionForAge(age));
  };
  exports["unsafeRmdFractionForAge"] = unsafeRmdFractionForAge;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["StateMA.StateMATaxRate"] = $PS["StateMA.StateMATaxRate"] || {};
  var exports = $PS["StateMA.StateMATaxRate"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Interpolate = $PS["Data.Interpolate"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var $$Math = $PS["Math"];                     
  var ordStateMATaxRate = Data_Ord.ordNumber;
  var mkStateMATaxRate = function (d) {
      if (d < 0.0) {
          return Effect_Exception_Unsafe.unsafeThrow(Data_Interpolate.i(Data_Interpolate.interpStringFunction(Data_Interpolate.interpStringFunction(Data_Interpolate.interpString)))("Invalid StaateMARaxRate ")(Data_Show.show(Data_Show.showNumber)(d)));
      };
      if (d > 0.9) {
          return Effect_Exception_Unsafe.unsafeThrow(Data_Interpolate.i(Data_Interpolate.interpStringFunction(Data_Interpolate.interpStringFunction(Data_Interpolate.interpString)))("Invalid StaateMARaxRate ")(Data_Show.show(Data_Show.showNumber)(d)));
      };
      if (Data_Boolean.otherwise) {
          return d;
      };
      throw new Error("Failed pattern match at StateMA.StateMATaxRate (line 16, column 1 - line 16, column 45): " + [ d.constructor.name ]);
  };
  var taxRateStateMATaxRate = {
      zeroRate: mkStateMATaxRate(0.0),
      rateToNumber: function (v) {
          return v;
      },
      absoluteDifference: function (v) {
          return function (v1) {
              return $$Math.abs(v - v1);
          };
      },
      Ord0: function () {
          return ordStateMATaxRate;
      }
  };
  exports["mkStateMATaxRate"] = mkStateMATaxRate;
  exports["taxRateStateMATaxRate"] = taxRateStateMATaxRate;
})(PS);
(function($PS) {
  "use strict";
  $PS["StateMA.Calculator"] = $PS["StateMA.Calculator"] || {};
  var exports = $PS["StateMA.Calculator"];
  var Age = $PS["Age"];
  var CommonTypes = $PS["CommonTypes"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Moneys = $PS["Moneys"];
  var StateMA_StateMATaxRate = $PS["StateMA.StateMATaxRate"];
  var TaxFunction = $PS["TaxFunction"];                
  var taxRate = function (year) {
      var selectRate = function (i) {
          if (i === 2020) {
              return 5.0e-2;
          };
          if (i === 2019) {
              return 5.05e-2;
          };
          if (i === 2018) {
              return 5.1e-2;
          };
          if (i < 2018) {
              return 5.1e-2;
          };
          if (Data_Boolean.otherwise) {
              return 5.0e-2;
          };
          throw new Error("Failed pattern match at StateMA.Calculator (line 19, column 3 - line 24, column 23): " + [ i.constructor.name ]);
      };
      return StateMA_StateMATaxRate.mkStateMATaxRate(selectRate(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(year)));
  };
  var taxFunction = (function () {
      var $6 = TaxFunction.flatTaxFunction(StateMA_StateMATaxRate.taxRateStateMATaxRate);
      return function ($7) {
          return $6(taxRate($7));
      };
  })();
  var personalExemptionFor = function (v) {
      return function (v1) {
          if (v1 instanceof CommonTypes.Married) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(8800);
          };
          if (v1 instanceof CommonTypes.HeadOfHousehold) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(6800);
          };
          if (v1 instanceof CommonTypes.Single) {
              return Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(4400);
          };
          throw new Error("Failed pattern match at StateMA.Calculator (line 29, column 1 - line 29, column 58): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var taxDue = function (year) {
      return function (bd) {
          return function (dependents) {
              return function (filingStatus) {
                  return function (maGrossIncome) {
                      var personalExemption = personalExemptionFor(year)(filingStatus);
                      var dependentsExemption = Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)(1000 * dependents | 0);
                      var ageExemption = Moneys.makeFromInt(Moneys.hasMakeFromIntDeduction)((function () {
                          var $5 = Age.isAge65OrOlder(bd)(year);
                          if ($5) {
                              return 700;
                          };
                          return 0;
                      })());
                      var deductions = Data_Array.fold(Moneys.monoidDeduction)([ personalExemption, ageExemption, dependentsExemption ]);
                      var taxableIncome = Moneys.applyDeductions(maGrossIncome)(deductions);
                      return taxFunction(year)(taxableIncome);
                  };
              };
          };
      };
  };
  exports["taxDue"] = taxDue;
  exports["taxRate"] = taxRate;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["GoogleSheetModule"] = $PS["GoogleSheetModule"] || {};
  var exports = $PS["GoogleSheetModule"];
  var CommonTypes = $PS["CommonTypes"];
  var Federal_BoundRegime = $PS["Federal.BoundRegime"];
  var Federal_Calculator = $PS["Federal.Calculator"];
  var Federal_OrdinaryBrackets = $PS["Federal.OrdinaryBrackets"];
  var Federal_QualifiedBrackets = $PS["Federal.QualifiedBrackets"];
  var Federal_RMDs = $PS["Federal.RMDs"];
  var Federal_Regime = $PS["Federal.Regime"];
  var Federal_TaxableSocialSecurity = $PS["Federal.TaxableSocialSecurity"];
  var StateMA_Calculator = $PS["StateMA.Calculator"];
  var UnsafeDates = $PS["UnsafeDates"];                
  var maStateTaxRate = StateMA_Calculator.taxRate;
  var maStateTaxDue = StateMA_Calculator.taxDue;
  exports["maStateTaxDue"] = maStateTaxDue;
  exports["maStateTaxRate"] = maStateTaxRate;
  exports["HeadOfHousehold"] = CommonTypes.HeadOfHousehold;
  exports["Married"] = CommonTypes.Married;
  exports["Single"] = CommonTypes.Single;
  exports["unsafeReadFilingStatus"] = CommonTypes.unsafeReadFilingStatus;
  exports["BoundRegime"] = Federal_BoundRegime.BoundRegime;
  exports["boundRegimeForKnownYear"] = Federal_BoundRegime.boundRegimeForKnownYear;
  exports["netDeduction"] = Federal_BoundRegime.netDeduction;
  exports["personalExemptionDeduction"] = Federal_BoundRegime.personalExemptionDeduction;
  exports["standardDeduction"] = Federal_BoundRegime.standardDeduction;
  exports["taxDueForKnownYear"] = Federal_Calculator.taxDueForKnownYear;
  exports["ordinaryIncomeBracketWidth"] = Federal_OrdinaryBrackets.ordinaryIncomeBracketWidth;
  exports["startOfNonZeroQualifiedRateBracket"] = Federal_QualifiedBrackets.startOfNonZeroQualifiedRateBracket;
  exports["unsafeRmdFractionForAge"] = Federal_RMDs.unsafeRmdFractionForAge;
  exports["PreTrump"] = Federal_Regime.PreTrump;
  exports["Trump"] = Federal_Regime.Trump;
  exports["unsafeReadRegime"] = Federal_Regime.unsafeReadRegime;
  exports["amountTaxable"] = Federal_TaxableSocialSecurity.amountTaxable;
  exports["amountTaxableInflationAdjusted"] = Federal_TaxableSocialSecurity.amountTaxableInflationAdjusted;
  exports["unsafeMakeDate"] = UnsafeDates.unsafeMakeDate;
  exports["unsafeMakeDay"] = UnsafeDates.unsafeMakeDay;
  exports["unsafeMakeMonth"] = UnsafeDates.unsafeMakeMonth;
  exports["unsafeMakeYear"] = UnsafeDates.unsafeMakeYear;
})(PS);
module.exports = PS["GoogleSheetModule"];
