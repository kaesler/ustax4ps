// Generated by purs bundle 0.14.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };   

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
      });
  }; 
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);                                   
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $89 = n < 1;
          if ($89) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["find"] = find;
  exports["drop"] = drop;
  exports["zip"] = zip;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];             
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  exports["Unfoldable1"] = Unfoldable1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List (line 285, column 1 - line 285, column 44): " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["tail"] = tail;
  exports["index"] = index;
  exports["reverse"] = reverse;
  exports["zip"] = zip;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var $$Set = function (x) {
      return x;
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $66 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($67) {
          return $66(toList($67));
      };
  };
  var fromMap = $$Set;
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
          return function ($69) {
              return $68(toList($69));
          };
      };
  }, function (f) {
      return function (x) {
          var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
          return function ($71) {
              return $70(toList($71));
          };
      };
  }, function (f) {
      return function (x) {
          var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
          return function ($73) {
              return $72(toList($73));
          };
      };
  });
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromMap"] = fromMap;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Set = $PS["Data.Set"];
  var keys = (function () {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($21) {
          return Data_Set.fromMap($20($21));
      };
  })();
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.String.Read"] = $PS["Data.String.Read"] || {};
  var exports = $PS["Data.String.Read"];
  var Read = function (read) {
      this.read = read;
  }; 
  var read = function (dict) {
      return dict.read;
  };
  exports["Read"] = Read;
  exports["read"] = read;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  "use strict";
  $PS["Taxes"] = $PS["Taxes"] || {};
  var exports = $PS["Taxes"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map = $PS["Data.Map"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Read = $PS["Data.String.Read"];
  var Data_Tuple = $PS["Data.Tuple"];                        
  var Triple = (function () {
      function Triple(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Triple.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Triple(value0, value1, value2);
              };
          };
      };
      return Triple;
  })();
  var HeadOfHousehold = (function () {
      function HeadOfHousehold() {

      };
      HeadOfHousehold.value = new HeadOfHousehold();
      return HeadOfHousehold;
  })();
  var Single = (function () {
      function Single() {

      };
      Single.value = new Single();
      return Single;
  })();
  var unsafeOrdinaryRateFromNumber = function (n) {
      return Data_Maybe.fromJust()(Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
          return i;
      })(Data_Int.fromNumber(n)));
  };
  var topRateOnOrdinaryIncome = 37;
  var third = function (v) {
      return v.value2;
  };
  var taxableSocialSecurity = function (filingStatus) {
      return function (ssBenefits) {
          return function (relevantIncome) {
              var f = function (combinedIncome) {
                  return function (v) {
                      if (combinedIncome < v.value0) {
                          return 0.0;
                      };
                      if (combinedIncome < v.value1) {
                          var maxSocSecTaxable = ssBenefits * 0.5;
                          return Data_Ord.min(Data_Ord.ordNumber)((combinedIncome - v.value0) * 0.5)(maxSocSecTaxable);
                      };
                      if (true) {
                          var maxSocSecTaxable = ssBenefits * 0.85;
                          return Data_Ord.min(Data_Ord.ordNumber)(4500.0 + (combinedIncome - v.value1) * 0.85)(maxSocSecTaxable);
                      };
                      throw new Error("Failed pattern match at Taxes (line 454, column 3 - line 454, column 71): " + [ combinedIncome.constructor.name, v.constructor.name ]);
                  };
              };
              var lowBase = (function () {
                  if (filingStatus instanceof Single) {
                      return 25000.0;
                  };
                  if (filingStatus instanceof HeadOfHousehold) {
                      return 25000.0;
                  };
                  throw new Error("Failed pattern match at Taxes (line 442, column 16 - line 444, column 33): " + [ filingStatus.constructor.name ]);
              })();
              var highBase = (function () {
                  if (filingStatus instanceof Single) {
                      return 34000.0;
                  };
                  if (filingStatus instanceof HeadOfHousehold) {
                      return 34000.0;
                  };
                  throw new Error("Failed pattern match at Taxes (line 446, column 16 - line 448, column 33): " + [ filingStatus.constructor.name ]);
              })();
              var combinedIncome = relevantIncome + ssBenefits / 2.0;
              return f(combinedIncome)(new Data_Tuple.Tuple(lowBase, highBase));
          };
      };
  };
  var taxableSocialSecurityAdjusted = function (year) {
      return function (filingStatus) {
          return function (ssBenefits) {
              return function (relevantIncome) {
                  var unadjusted = taxableSocialSecurity(filingStatus)(ssBenefits)(relevantIncome);
                  var adjustmentFactor = 1.0 + 3.0e-2 * Data_Int.toNumber(year - 2021 | 0);
                  var adjusted = unadjusted * adjustmentFactor;
                  return Data_Ord.min(Data_Ord.ordNumber)(adjusted)(ssBenefits) * 0.85;
              };
          };
      };
  };
  var showStandardDeduction = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var showOrdinaryRate = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var showFilingStatus = new Data_Show.Show(function (v) {
      if (v instanceof HeadOfHousehold) {
          return "HeadOfHousehold";
      };
      if (v instanceof Single) {
          return "Single";
      };
      throw new Error("Failed pattern match at Taxes (line 77, column 1 - line 79, column 25): " + [ v.constructor.name ]);
  });
  var showBracketStart = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var readFilingStatus = new Data_String_Read.Read(function (s) {
      if (s === "HOH") {
          return new Data_Maybe.Just(HeadOfHousehold.value);
      };
      if (s === "HeadOfHousehold") {
          return new Data_Maybe.Just(HeadOfHousehold.value);
      };
      if (s === "Single") {
          return new Data_Maybe.Just(Single.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var unsafeReadFilingStatus = function (s) {
      return Data_Maybe.fromJust()(Data_String_Read.read(readFilingStatus)(s));
  };
  var qualifiedRateAsFraction = function (v) {
      return Data_Int.toNumber(v) / 100.0;
  };

  //(unsafePartial <<< fromJust <<< rmdFractionForAge)
  var over65Increment = 1350;
  var standardDeduction = function (v) {
      if (v instanceof HeadOfHousehold) {
          return 18800 + over65Increment | 0;
      };
      if (v instanceof Single) {
          return 12550 + over65Increment | 0;
      };
      throw new Error("Failed pattern match at Taxes (line 396, column 1 - line 396, column 55): " + [ v.constructor.name ]);
  };
  var ordinaryRateAsFraction = function (v) {
      return Data_Int.toNumber(v) / 100.0;
  };
  var nonNeg = function (x) {
      if (x < 0.0) {
          return 0.0;
      };
      return x;
  };
  var maStateTaxRate = 5.0e-2;
  var eqQualifiedRate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordQualifiedRate = new Data_Ord.Ord(function () {
      return eqQualifiedRate;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var qualifiedBracketStarts = function (v) {
      if (v instanceof Single) {
          return Data_Map_Internal.fromFoldable(ordQualifiedRate)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(0, 0), new Data_Tuple.Tuple(15, 40400), new Data_Tuple.Tuple(20, 445850) ]);
      };
      if (v instanceof HeadOfHousehold) {
          return Data_Map_Internal.fromFoldable(ordQualifiedRate)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(0, 0), new Data_Tuple.Tuple(15, 54100), new Data_Tuple.Tuple(20, 473850) ]);
      };
      throw new Error("Failed pattern match at Taxes (line 318, column 1 - line 318, column 73): " + [ v.constructor.name ]);
  };
  var startOfNonZeroQualifiedRateBracket = function (fs) {
      var v = Data_Maybe.fromJust()(Data_List.index(Data_Map_Internal.values(qualifiedBracketStarts(fs)))(1));
      return v;
  };
  var eqOrdinaryRate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordOrdinaryRate = new Data_Ord.Ord(function () {
      return eqOrdinaryRate;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var ordinaryIncomeBracketStarts = function (v) {
      if (v instanceof Single) {
          return Data_Map_Internal.fromFoldable(ordOrdinaryRate)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(10, 0), new Data_Tuple.Tuple(12, 9950), new Data_Tuple.Tuple(22, 40525), new Data_Tuple.Tuple(24, 86375), new Data_Tuple.Tuple(32, 164925), new Data_Tuple.Tuple(35, 209425), new Data_Tuple.Tuple(topRateOnOrdinaryIncome, 523600) ]);
      };
      if (v instanceof HeadOfHousehold) {
          return Data_Map_Internal.fromFoldable(ordOrdinaryRate)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(10, 0), new Data_Tuple.Tuple(12, 14200), new Data_Tuple.Tuple(22, 54200), new Data_Tuple.Tuple(24, 86350), new Data_Tuple.Tuple(32, 164900), new Data_Tuple.Tuple(35, 209400), new Data_Tuple.Tuple(topRateOnOrdinaryIncome, 523600) ]);
      };
      throw new Error("Failed pattern match at Taxes (line 219, column 1 - line 219, column 77): " + [ v.constructor.name ]);
  };
  var ordinaryIncomeBracketStart = function (filingStatus) {
      return function (ordinaryRate) {
          var brackets = ordinaryIncomeBracketStarts(filingStatus);
          return Data_Maybe.fromJust()(Data_Map_Internal.lookup(ordOrdinaryRate)(ordinaryRate)(brackets));
      };
  };
  var ordinaryRateSuccessor = function (fs) {
      return function (rate) {
          var brackets = ordinaryIncomeBracketStarts(fs);
          var rates = Data_Array.fromFoldable(Data_Set.foldableSet)(Data_Map.keys(brackets));
          var ratesTail = Data_Array.drop(1)(rates);
          var pairs = Data_Array.zip(rates)(ratesTail);
          var pair = Data_Array.find(function (p) {
              return Data_Eq.eq(eqOrdinaryRate)(Data_Tuple.fst(p))(rate);
          })(pairs);
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(pair);
      };
  };
  var unsafeOrdinaryRateSuccessor = function (fs) {
      return function (rate) {
          var v = Data_Maybe.fromJust()(ordinaryRateSuccessor(fs)(rate));
          return v;
      };
  };
  var safeOrdinaryIncomeBracketWidth = function (fs) {
      return function (rate) {
          var brackets = ordinaryIncomeBracketStarts(fs);
          var rates = Data_Set.toUnfoldable(Data_List_Types.unfoldableList)(Data_Map.keys(brackets));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_List.tail(rates))(function (ratesTail) {
              var pairs = Data_List.zip(rates)(ratesTail);
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Foldable.find(Data_List_Types.foldableList)(function (p) {
                  return Data_Eq.eq(eqOrdinaryRate)(Data_Tuple.fst(p))(rate);
              })(pairs))(function (pair) {
                  var successor = Data_Tuple.snd(pair);
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(ordOrdinaryRate)(rate)(brackets))(function (v) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(ordOrdinaryRate)(successor)(brackets))(function (v1) {
                          return new Data_Maybe.Just(v1 - v | 0);
                      });
                  });
              });
          });
      };
  };
  var ordinaryIncomeBracketWidth = function (fs) {
      return function (rate) {
          return Data_Maybe.fromJust()(safeOrdinaryIncomeBracketWidth(fs)(rate));
      };
  };
  var eqFilingStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof HeadOfHousehold && y instanceof HeadOfHousehold) {
              return true;
          };
          if (x instanceof Single && y instanceof Single) {
              return true;
          };
          return false;
      };
  });
  var maStateTaxDue = function (year) {
      return function (dependents) {
          return function (filingStatus) {
              return function (maGrossIncome) {
                  var personalExemption = (function () {
                      var $129 = Data_Eq.eq(eqFilingStatus)(filingStatus)(HeadOfHousehold.value);
                      if ($129) {
                          return 6800.0;
                      };
                      return 4400.0;
                  })();
                  var dependentsExemption = 1000.0 * Data_Int.toNumber(dependents);
                  return maStateTaxRate * nonNeg(maGrossIncome - personalExemption - 700.0 - dependentsExemption);
              };
          };
      };
  }; 
  var eqAge = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordAge = new Data_Ord.Ord(function () {
      return eqAge;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var distributionPeriods = Data_Map_Internal.fromFoldable(ordAge)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(70, 27.4), new Data_Tuple.Tuple(71, 26.5), new Data_Tuple.Tuple(72, 25.6), new Data_Tuple.Tuple(73, 24.7), new Data_Tuple.Tuple(74, 23.8), new Data_Tuple.Tuple(75, 22.9), new Data_Tuple.Tuple(76, 22.0), new Data_Tuple.Tuple(77, 21.2), new Data_Tuple.Tuple(78, 20.3), new Data_Tuple.Tuple(79, 19.5), new Data_Tuple.Tuple(80, 18.7), new Data_Tuple.Tuple(81, 17.9), new Data_Tuple.Tuple(82, 17.1), new Data_Tuple.Tuple(83, 16.3), new Data_Tuple.Tuple(84, 15.5), new Data_Tuple.Tuple(85, 14.8), new Data_Tuple.Tuple(86, 14.1), new Data_Tuple.Tuple(87, 13.4), new Data_Tuple.Tuple(88, 12.7), new Data_Tuple.Tuple(89, 12.0), new Data_Tuple.Tuple(90, 11.4), new Data_Tuple.Tuple(91, 10.8), new Data_Tuple.Tuple(92, 10.2), new Data_Tuple.Tuple(93, 9.6), new Data_Tuple.Tuple(94, 9.1), new Data_Tuple.Tuple(95, 8.6), new Data_Tuple.Tuple(96, 8.1), new Data_Tuple.Tuple(97, 7.6), new Data_Tuple.Tuple(98, 7.1), new Data_Tuple.Tuple(99, 6.7), new Data_Tuple.Tuple(100, 6.3), new Data_Tuple.Tuple(101, 5.9), new Data_Tuple.Tuple(102, 5.5), new Data_Tuple.Tuple(103, 5.2), new Data_Tuple.Tuple(104, 4.9), new Data_Tuple.Tuple(105, 4.5), new Data_Tuple.Tuple(106, 4.2), new Data_Tuple.Tuple(107, 3.9), new Data_Tuple.Tuple(108, 3.7), new Data_Tuple.Tuple(109, 3.4), new Data_Tuple.Tuple(110, 3.1), new Data_Tuple.Tuple(111, 2.9), new Data_Tuple.Tuple(112, 2.6), new Data_Tuple.Tuple(113, 2.4), new Data_Tuple.Tuple(114, 2.1) ]);
  var rmdFractionForAge = function (age) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(ordAge)(age)(distributionPeriods))(function (distributionPeriod) {
          return new Data_Maybe.Just(1.0 / distributionPeriod);
      });
  };
  var unsafeRmdFractionForAge = function (age) {
      return Data_Maybe.fromJust()(rmdFractionForAge(age));
  };
  var applyQualifiedIncomeBrackets = function (fs) {
      return function (taxableOrdinaryIncome) {
          return function (qualifiedIncome) {
              var totalIncome = taxableOrdinaryIncome + qualifiedIncome;
              var func = function (v) {
                  return function (v1) {
                      var totalIncomeYetToBeTaxed = nonNeg(totalIncome - v.value0);
                      var totalIncomeInThisBracket = nonNeg(totalIncomeYetToBeTaxed - Data_Int.toNumber(v1.value1));
                      var ordinaryIncomeYetToBeTaxed = nonNeg(totalIncomeYetToBeTaxed - v.value1);
                      var ordinaryIncomeInThisBracket = nonNeg(ordinaryIncomeYetToBeTaxed - Data_Int.toNumber(v1.value1));
                      var gainsInThisBracket = nonNeg(totalIncomeInThisBracket - ordinaryIncomeInThisBracket);
                      var taxInThisBracket = gainsInThisBracket * qualifiedRateAsFraction(v1.value0);
                      return new Triple(v.value0 + totalIncomeInThisBracket, nonNeg(v.value1 - gainsInThisBracket), v.value2 + taxInThisBracket);
                  };
              };
              var brackets = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(qualifiedBracketStarts(fs));
              var bracketsDescending = Data_List.reverse(brackets);
              return third(Data_Foldable.foldl(Data_List_Types.foldableList)(func)(new Triple(0.0, qualifiedIncome, 0.0))(bracketsDescending));
          };
      };
  };
  var applyOrdinaryIncomeBrackets = function (fs) {
      return function (ordinaryincome) {
          var func = function (v) {
              return function (v1) {
                  var incomeInThisBracket = nonNeg(v.value0 - Data_Int.toNumber(v1.value1));
                  var taxInThisBracket = incomeInThisBracket * ordinaryRateAsFraction(v1.value0);
                  return new Data_Tuple.Tuple(nonNeg(v.value0 - incomeInThisBracket), v.value1 + taxInThisBracket);
              };
          };
        
          // Note: is this how one uses toUnfoldable?
  var brackets = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(ordinaryIncomeBracketStarts(fs));
          var bracketsDescending = Data_List.reverse(brackets);
          return Data_Tuple.snd(Data_Foldable.foldl(Data_List_Types.foldableList)(func)(new Data_Tuple.Tuple(ordinaryincome, 0.0))(bracketsDescending));
      };
  };
  var federalTaxResults = function (year) {
      return function (filingStatus) {
          return function (socSec) {
              return function (ordinaryIncome) {
                  return function (qualifiedIncome) {
                      var ssRelevantOtherIncome = ordinaryIncome + qualifiedIncome;
                      var taxableSocSec = taxableSocialSecurity(filingStatus)(socSec)(ssRelevantOtherIncome);
                      var v = standardDeduction(filingStatus);
                      var taxableOrdinaryIncome = nonNeg((taxableSocSec + ordinaryIncome) - Data_Int.toNumber(v));
                      var taxOnQualifiedIncome = applyQualifiedIncomeBrackets(filingStatus)(taxableOrdinaryIncome)(qualifiedIncome);
                      var taxOnOrdinaryIncome = applyOrdinaryIncomeBrackets(filingStatus)(taxableOrdinaryIncome);
                      return {
                          ssRelevantOtherIncome: ssRelevantOtherIncome,
                          taxableSocSec: taxableSocSec,
                          stdDeduction: standardDeduction(filingStatus),
                          taxableOrdinaryIncome: taxableOrdinaryIncome,
                          taxOnOrdinaryIncome: taxOnOrdinaryIncome,
                          taxOnQualifiedIncome: taxOnQualifiedIncome
                      };
                  };
              };
          };
      };
  };
  var federalTaxDue = function (year) {
      return function (filingStatus) {
          return function (socSec) {
              return function (taxableOrdinaryIncome) {
                  return function (qualifiedIncome) {
                      var v = federalTaxResults(year)(filingStatus)(socSec)(taxableOrdinaryIncome)(qualifiedIncome);
                      return v.taxOnOrdinaryIncome + v.taxOnQualifiedIncome;
                  };
              };
          };
      };
  };
  exports["HeadOfHousehold"] = HeadOfHousehold;
  exports["Single"] = Single;
  exports["applyOrdinaryIncomeBrackets"] = applyOrdinaryIncomeBrackets;
  exports["federalTaxDue"] = federalTaxDue;
  exports["maStateTaxDue"] = maStateTaxDue;
  exports["maStateTaxRate"] = maStateTaxRate;
  exports["ordinaryIncomeBracketStart"] = ordinaryIncomeBracketStart;
  exports["ordinaryIncomeBracketWidth"] = ordinaryIncomeBracketWidth;
  exports["ordinaryRateSuccessor"] = ordinaryRateSuccessor;
  exports["rmdFractionForAge"] = rmdFractionForAge;
  exports["standardDeduction"] = standardDeduction;
  exports["startOfNonZeroQualifiedRateBracket"] = startOfNonZeroQualifiedRateBracket;
  exports["taxableSocialSecurity"] = taxableSocialSecurity;
  exports["taxableSocialSecurityAdjusted"] = taxableSocialSecurityAdjusted;
  exports["unsafeOrdinaryRateFromNumber"] = unsafeOrdinaryRateFromNumber;
  exports["unsafeOrdinaryRateSuccessor"] = unsafeOrdinaryRateSuccessor;
  exports["unsafeReadFilingStatus"] = unsafeReadFilingStatus;
  exports["unsafeRmdFractionForAge"] = unsafeRmdFractionForAge;
  exports["showFilingStatus"] = showFilingStatus;
  exports["showOrdinaryRate"] = showOrdinaryRate;
  exports["showBracketStart"] = showBracketStart;
  exports["showStandardDeduction"] = showStandardDeduction;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Console = $PS["Effect.Console"];
  var Taxes = $PS["Taxes"];                
  var print = function (dictShow) {
      return function (x) {
          return Effect_Console.log(Data_Show.show(dictShow)(x));
      };
  };
  var main = function __do() {
      print(Data_Show.showNumber)(Taxes.applyOrdinaryIncomeBrackets(Taxes.HeadOfHousehold.value)(50000.0))();
      print(Data_Show.showNumber)(Taxes.federalTaxDue(2030)(Taxes.Single.value)(40000.0)(40000.0)(5000.0))();
      print(Data_Show.showNumber)(Taxes.maStateTaxDue(65)(1)(Taxes.Single.value)(50000.0))();
      print(Taxes.showBracketStart)(Taxes.ordinaryIncomeBracketStart(Taxes.Single.value)(22))();
      print(Data_Show.showInt)(Taxes.ordinaryIncomeBracketWidth(Taxes.Single.value)(22))();
      print(Data_Maybe.showMaybe(Taxes.showOrdinaryRate))(Taxes.ordinaryRateSuccessor(Taxes.HeadOfHousehold.value)(22))();
      print(Data_Maybe.showMaybe(Data_Show.showNumber))(Taxes.rmdFractionForAge(76))();
      print(Data_Show.showInt)(Taxes.startOfNonZeroQualifiedRateBracket(Taxes.Single.value))();
      print(Taxes.showStandardDeduction)(Taxes.standardDeduction(Taxes.Single.value))();
      print(Data_Show.showNumber)(Taxes.taxableSocialSecurity(Taxes.HeadOfHousehold.value)(40000.0)(40000.0))();
      print(Data_Show.showNumber)(Taxes.taxableSocialSecurityAdjusted(2040)(Taxes.Single.value)(50000.0)(40000.0))();
      print(Taxes.showOrdinaryRate)(Taxes.unsafeOrdinaryRateFromNumber(22.0))();
      print(Data_Show.showInt)(Taxes.unsafeOrdinaryRateSuccessor(Taxes.Single.value)(22))();
      print(Taxes.showFilingStatus)(Taxes.unsafeReadFilingStatus("Single"))();
      print(Data_Show.showNumber)(Taxes.unsafeRmdFractionForAge(76))();
      return print(Data_Show.showNumber)(Taxes.maStateTaxRate)();
  };
  exports["print"] = print;
  exports["main"] = main;
})(PS);
PS["Main"].main();